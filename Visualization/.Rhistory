source('C:/Users/slick/Programs/Invisible College/Braid Performance Test/Visualization/Vis.R')
time.data <- read_csv("vis.R")
time.data <- read_csv("Vis.R")
time.data <- read_csv("broad-test-sync9-automerge.csv")
?read_csv
time.data <- read_csv("broad-test-sync9-automerge.csv",
col_types = "iiiiiidd")
sum(time.data$automerge < time.data$sync9)
edge.cases <- time.data %>% filter(sync9 > automerge)
View(edge.cases)
edge.cases <- time.data[order(sync9-automerge)] %>% filter(sync9 > automerge)
?order
time.data <- read_csv("broad-test-sync9-automerge.csv")
library(tidyverse)
time.data <- read_csv("broad-test-sync9-automerge.csv")
?read_csv
time.data <- read_csv("broad-test-sync9-automerge.csv",
col_types="iiidiicd")
rm(edge.cases)
time.data <- read_csv("long-seq-many-clients-2.csv",
col_types="iiidiicd")
time.data <- read_csv("long-seq-many-clients2.csv",
col_types="iiidiicd")
ggplot(data = time.data, aes(x=clients, y=time)) +
geom_smooth()
ggplot(data = time.data, aes(x=clients, y=time)) + theme_bw()
ggplot(data = time.data, aes(x=clients, y=time)) + theme_bw() +
geom_smooth()
?geom_smooth
ggplot(data = time.data, aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point()
time.data %>% filter(eps == 0.5, editnum == 80) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point()
time.data %>% filter(eps == 0.5, editnum == 160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point()
time.data %>% filter(eps == 0.5) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point()
time.data %>% filter(editnum == 80) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point()
time.data %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(vars(editnum), vars(eps))
time.data %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(vars(editnum), vars(eps), scales="free_x")
time.data %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(vars(editnum), vars(eps), scales="free_y")
time.data %>% filter(editnum==160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(vars(eps), scales="free_y")
time.data %>% filter(editnum==160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps))
time.data %>% filter(editnum==160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), scales="free")
time.data %>% filter() %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), scales="free")
time.data %>% filter(editnum > 50) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), scales="free")
time.data %>% filter(editnum == 80) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), scales="free")
time.data %>% filter(editnum == 180) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), scales="free")
time.data %>% filter(editnum == 160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), scales="free")
time.data %>% filter(editnum == 160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), scales="free_y")
time.data %>% filter(editnum == 160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), scales="free_x")
time.data %>% filter(editnum == 160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps))
time.data %>% filter(editnum == 160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio",
tag="A")
time.data %>% filter(editnum == 160) %>%
ggplot(data = ., aes(x=clients, y=time, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio")
time.data %>% filter(editnum == 160) %>%
ggplot(data = ., aes(x=clients, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio")
source('C:/Users/slick/Programs/Invisible College/Braid Performance Test/Visualization/Vis.R')
time.data %>% filter() %>%
ggplot(data = ., aes(x=clients, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio")
time.data <- read_csv("very-long-seq-many-clients.csv",
col_types="iiidiicd")
time.data %>% filter() %>%
ggplot(data = ., aes(x=clients, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio")
?labs
time.data %>% filter() %>%
ggplot(data = ., aes(x=clients, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio", tag="500 lines of dialogue")
time.data %>% filter() %>%
ggplot(data = ., aes(x=clients, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio", caption="500 lines of dialogue")
source('C:/Users/slick/Programs/Invisible College/Braid Performance Test/Visualization/Vis.R')
time.data %>%
ggplot(data = ., aes(x=clients, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio", caption="200 lines of dialogue")
library(tidyverse)
time.data <- read_csv("fixed-latency.csv")
time.data <- read_csv("fixed-latency.csv",
col_types="iiidiicd")
time.data %>%
ggplot(data = ., aes(x=clients, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio", caption="200 lines of dialogue")
source('C:/Users/slick/Programs/Invisible College/Braid Performance Test/Visualization/Vis.R')
time.data %>%
ggplot(data = ., aes(x=clients, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(latency)) +
labs(title="Running time depending on number of clients and edit-to-network ratio", caption="200 lines of dialogue")
time.data %>%
ggplot(data = ., aes(x=latency, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps)) +
labs(title="Running time depending on number of clients and edit-to-network ratio", caption="200 lines of dialogue")
time.data %>%
ggplot(data = ., aes(x=latency, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), rows=vars(clients)) +
labs(title="Running time depending on number of clients and edit-to-network ratio", caption="200 lines of dialogue")
time.data %>%
ggplot(data = ., aes(x=latency, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), rows=vars(clients)) +
labs(title="Running time depending on number of clients and edit-to-network ratio", caption="200 lines of dialogue",
y="Seconds per client", x="Client-to-server Latency (Ticks)")
source('C:/Users/slick/Programs/Invisible College/Braid Performance Test/Visualization/Vis.R')
library(tidyverse)
time.data <- read_csv("fixed-latency-2.csv",
col_types="iiidiicd")
time.data %>%
ggplot(data = ., aes(x=latency, y=time/clients, color=algorithm)) + theme_bw() +
geom_point() + facet_grid(cols=vars(eps), rows=vars(clients)) +
labs(title="Running time depending on number of clients and edit frequency", caption="150 lines of dialogue",
y="Seconds per client", x="Client-to-server Latency (Ticks)")
max(time.data$time)
which.max(time.data$time)
time.data[80]
time.data[,80]
time.data[80,]
mean(time.data$time)
